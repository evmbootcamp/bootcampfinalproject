/*
// This is the backend server file, for online auction marketplace
// contains all the apis for front-end and smart contract
*/

const express = require('express');
// const swaggerUi = require('swagger-ui-express');
// const swaggerJSDoc = require('swagger-jsdoc');
const bcrypt = require('bcrypt');
const {jwt, JWT_SECRET, auth} = require("./auth");
const {mongoose, UserModel, AuctionModel} = require("./../db");
const { createAuctionInDB, getAllAuctions, getAllAuctionsCreatedByUser, bid, getAllAuctionsWonByABidder } = require('./../utilities/helper');
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

( async () => {
    try {
        const dbConnectionStatus = await mongoose.connect("");
        console.log("DB Connection Successful");
    } catch(e) {
        console.log("DB Connection failed!");
        // res.status(500).json({
        //     message: "DB Connection Failed! Check DB connection string."
        // });
    }
    
}) ()



/* Account/Authentication related APIs */
/// signup
/*app.post('/signup', async (req, res) => {
    const name = req.body.name;
    const email = req.body.email;
    const password = req.body.password;
    
    // hash the password using bcrypt; then store in DB
    const hashedPassword = await bcrypt.hash(password, 5); //second argument is 'saltRounds'
    
    try {
        await UserModel.create({
            name: name,
            email: email,
            password: hashedPassword            
        });
        res.status(201).json({
            message: "account created successfully"
        });
    } catch (e) {
        res.status(500).json({
            message: "Could not create user! Try again after some time."
        }); 
    }   
});


/// sign-in / login
app.post('/signin', async (req, res) => {
    // check if the username and password are valid
    const email = req.body.email;
    const password = req.body.password;
    
    // check if the username is valid
    try {        
        const foundUser = await UserModel.findOne({
            email: email
        });
        // check if the password is correct
        const passwordMatch = await bcrypt.compare(password, foundUser.password);
        
        if (passwordMatch) {
            // generate JWT token
            const token = jwt.sign({
                userId: foundUser._id.toString()
            }, JWT_SECRET);

            // TODO: create an expiry time and store the token in db

            res.status(200).json({
                token: token,
                message: "User logged in"
            });
        }
        else {
            res.status(403).json({
                message: "Incorrect Password"
            });
        }
    } catch(e) {
        res.status(403).json({
            message: `No user found with the email: ${email}`
        });
    }

});
*/



/// connectwallet
// FE passes the public address in the request body
/**
 * 1. query Users table with wallet address. 
 * 2. if user found, then bring that and use user._id to create token 
 * 3. if user not found, then create a User with wallet
 * 4. return the User id and use user._id to create token
 */
app.post('/connectwallet', async (req, res) => {
    const userPublicWalletAddress = req.body.walletAddress;
    const userNickName = req.body.nickName;
    let user = null;    
    try {
        const foundUser = await UserModel.findOne({
            wallet: userPublicWalletAddress
        });

        if (!foundUser) {            
            // first time user. Create a user
            user = await UserModel.create({
                wallet: userPublicWalletAddress,
                nickName: userNickName
            });     
            
        } else {
            user = foundUser;
        }  
                
        // generate JWT token
        const token = jwt.sign({
            userId: user._id.toString()
        }, JWT_SECRET);        

        res.status(200).json({
            token: token,
            message: "User's wallet is connected and user is logged in"
        }); 
    } catch(e) {
        res.status(500).json({
            message: `Could not connect Wallet and Login the user: Something went wrong`
        });
    }
});

/// logout
app.post('/logout', auth, (req, res) => {
    const userId = req.userId;
    try {
        res.status(200).json({
            message: "User is logged out",
            token: ""        
        });
    } catch(e) {
        res.status(500).json({
            message: "Failed logging out the user. Something went wrong! Try again"
        });
    }

});


/* GET APIs */
/// landing page ('/')
// shows all the auctions
// no authentication required
app.get('/', async (req, res) => {
    try {
        // get all the Auctions
        const auctions = await getAllAuctions();
        res.json({
            message: "Welcome to Online Auction Marketplace",
            auctions: auctions            
        });
    } catch(e) {
        res.status(500).json({
            message: "Couldn't get all auctions. Something went wrong!"
        })
    }    
})



/// get all auctions created/sold by a user (authenticated)
app.get('/auctions/myauctions', auth, async (req, res) => {
    try {
        const allAuctionsCreatedByMe = await getAllAuctionsCreatedByUser(req.userId);
        res.status(200).json({
            auctionsICreated: allAuctionsCreatedByMe,
            message: "All Auctions I have created are here."
        });
    } catch(e) {
        res.status(500).json({
            message: "Could not get the auctions you cretaed. Something went wrong!"
        });
        
    }
});


/// get all the Winning Bids for the user (authenticated)
app.get('/auctions/mywins', auth, async (req, res) => {
    const bidderId = req.userId;
    try {
        const auctionsWon = await getAllAuctionsWonByABidder(bidderId);
        res.status(200).json({
            message: "Auctions won by the user are provided.",
            auctionsWon: auctionsWon
        });
    } catch(e) {
        console.log('Could not find auctions won by the bidder. Something went wrong!');
        console.log(e.message);
        res.status(500).json({ message: "Could not find auctions won by the bidder. Something went wrong!" });
    }
});


/// create an Auction (authenticated)
app.post('/auctions', auth, async (req, res) => {
    const userId = req.userId; 

    // extract new auction object info from 'request' body
    const newAuctionObject = {};
    newAuctionObject["auctionName"] = req.body.auctionName;
    newAuctionObject["startBidPrice"] = req.body.startBidPrice;    
    newAuctionObject["auctionDescription"] = req.body.description;
    newAuctionObject["auctionCreatorId"] = userId;    
    newAuctionObject["auctionStatus"] = "Ongoing";
    newAuctionObject["auctionStartDateTime"] = new Date(req.body.auctionStartTime);
    newAuctionObject["auctionEndDateTime"] = new Date(req.body.auctionEndTime);    
    
    try {
        // step-1: TODO create a new Auction smart contract for this auction: 

        // step-2: create new db record in auctions table
        const newAuction = await createAuctionInDB(newAuctionObject); 
        res.status(201).json({
            auctionId: newAuction._id.toString(),
            message: "Auction created."
        });
    } catch(e) {
        res.status(500).json({
            message: "Could not create Auction! Something went wrong."
        }); 
    }    
});

/// place a bid (authenticated)
app.post('/auctions/:auctionId/bid', auth, async (req, res) => {
    const bidderId = req.userId; 
    const bidAmount = req.body.bidAmount; // validation to be done at FE side: bidAmount should be >= current highest bid price
    const auctionId = req.params.auctionId;
    const elapsedTime = Date.now();
    const today = new Date(elapsedTime);
    const bidTime = today.toISOString(); // "2020-06-13T18:30:00.000Z"

    try {
        // step-1: TODO call smart contract's bid method

        // step-2: create new db record 
        const result = await bid(auctionId, bidderId, bidAmount, bidTime);
        await updateAuctionWinner(auctionId, bidderId, bidAmount);
        res.status(201).json({
            message: "Bid was successful",
            bidId: result._id.toString()
        });
    } catch(e) {
        res.status(500).json({
            message: "'Error putting a bid!"
        });
        
    }
});


/// update/extend expiry time of an auction
// FE to make sure that the new end-time must be > existing end time
// only the currently "Ongoing" auctions can be extended 
// only the auction creator can extend the auction
app.patch('/auctions/:auctionId/extend', auth, async (req, res) => {
    const auctionCreatorId = req.userId;
    const newEndTime = new Date(req.body.auctionEndTime);
    const auctionId = req.params.auctionId;
    try {
        // update Auction record with winner 
        await AuctionModel.updateOne({
            _id: auctionId,
            creatorId: auctionCreatorId,
            status: "Ongoing"
        }, {
            endTime: newEndTime,            
        });
        res.status(200).json({
            message: "Auction extended successfully."
        });
    } catch(e) {
        res.status(500).json({
            message: "'Error extending the auction's timeline! Something went wrong"
        });
    }
});


/* Internal Functions */
/// A "bid" by definition is the highest bid, so far
// hence, whenver a new bid is received, this becomes the winning bid
// thus, update db accordingly
// ideally, this function should be called AFTER 
// successfully calling "placeBid" function of smart contract
async function updateAuctionWinner(auctionId, winnerId, winningPrice) {
    try {
        // update Auction record with winner 
        await AuctionModel.updateOne({
            _id: auctionId
        }, {
            winnerId: winnerId,
            winningPrice: winningPrice
            // status: "Completed" //along with winner, update the status also to Completed
        });        
    } catch(e) {        
    }
}

/// this function should be called upon receiving the "AuctionFinalized" event from smart contract
async function closeAnAuction(auctionId) {
    try {
        // update Auction record with winner 
        await AuctionModel.updateOne({
            _id: auctionId
        }, {            
            status: "Completed"
        });
        
    } catch(e) {        
    }
}

// ------ PORT --------
const port = process.env.PORT || 4000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});